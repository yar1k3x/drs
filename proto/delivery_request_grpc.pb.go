// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: drs/proto/delivery_request.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeliveryRequestService_CreateRequest_FullMethodName      = "/drs.DeliveryRequestService/CreateRequest"
	DeliveryRequestService_GetRequest_FullMethodName         = "/drs.DeliveryRequestService/GetRequest"
	DeliveryRequestService_UpdateRequest_FullMethodName      = "/drs.DeliveryRequestService/UpdateRequest"
	DeliveryRequestService_DeleteRequest_FullMethodName      = "/drs.DeliveryRequestService/DeleteRequest"
	DeliveryRequestService_ExportCSV_FullMethodName          = "/drs.DeliveryRequestService/ExportCSV"
	DeliveryRequestService_GetRequestStatuses_FullMethodName = "/drs.DeliveryRequestService/GetRequestStatuses"
)

// DeliveryRequestServiceClient is the client API for DeliveryRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryRequestServiceClient interface {
	CreateRequest(ctx context.Context, in *CreateRequestInput, opts ...grpc.CallOption) (*CreateRequestResponse, error)
	GetRequest(ctx context.Context, in *GetRequestInput, opts ...grpc.CallOption) (*GetRequestResponse, error)
	UpdateRequest(ctx context.Context, in *UpdateRequestInput, opts ...grpc.CallOption) (*UpdateRequestResponse, error)
	DeleteRequest(ctx context.Context, in *DeleteRequestInput, opts ...grpc.CallOption) (*DeleteRequestResponse, error)
	ExportCSV(ctx context.Context, in *GetRequestInput, opts ...grpc.CallOption) (*ExportCSVResponse, error)
	GetRequestStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRequestStatusesResponse, error)
}

type deliveryRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryRequestServiceClient(cc grpc.ClientConnInterface) DeliveryRequestServiceClient {
	return &deliveryRequestServiceClient{cc}
}

func (c *deliveryRequestServiceClient) CreateRequest(ctx context.Context, in *CreateRequestInput, opts ...grpc.CallOption) (*CreateRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRequestResponse)
	err := c.cc.Invoke(ctx, DeliveryRequestService_CreateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryRequestServiceClient) GetRequest(ctx context.Context, in *GetRequestInput, opts ...grpc.CallOption) (*GetRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRequestResponse)
	err := c.cc.Invoke(ctx, DeliveryRequestService_GetRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryRequestServiceClient) UpdateRequest(ctx context.Context, in *UpdateRequestInput, opts ...grpc.CallOption) (*UpdateRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRequestResponse)
	err := c.cc.Invoke(ctx, DeliveryRequestService_UpdateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryRequestServiceClient) DeleteRequest(ctx context.Context, in *DeleteRequestInput, opts ...grpc.CallOption) (*DeleteRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRequestResponse)
	err := c.cc.Invoke(ctx, DeliveryRequestService_DeleteRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryRequestServiceClient) ExportCSV(ctx context.Context, in *GetRequestInput, opts ...grpc.CallOption) (*ExportCSVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportCSVResponse)
	err := c.cc.Invoke(ctx, DeliveryRequestService_ExportCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryRequestServiceClient) GetRequestStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRequestStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRequestStatusesResponse)
	err := c.cc.Invoke(ctx, DeliveryRequestService_GetRequestStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryRequestServiceServer is the server API for DeliveryRequestService service.
// All implementations must embed UnimplementedDeliveryRequestServiceServer
// for forward compatibility.
type DeliveryRequestServiceServer interface {
	CreateRequest(context.Context, *CreateRequestInput) (*CreateRequestResponse, error)
	GetRequest(context.Context, *GetRequestInput) (*GetRequestResponse, error)
	UpdateRequest(context.Context, *UpdateRequestInput) (*UpdateRequestResponse, error)
	DeleteRequest(context.Context, *DeleteRequestInput) (*DeleteRequestResponse, error)
	ExportCSV(context.Context, *GetRequestInput) (*ExportCSVResponse, error)
	GetRequestStatuses(context.Context, *emptypb.Empty) (*GetRequestStatusesResponse, error)
	mustEmbedUnimplementedDeliveryRequestServiceServer()
}

// UnimplementedDeliveryRequestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeliveryRequestServiceServer struct{}

func (UnimplementedDeliveryRequestServiceServer) CreateRequest(context.Context, *CreateRequestInput) (*CreateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequest not implemented")
}
func (UnimplementedDeliveryRequestServiceServer) GetRequest(context.Context, *GetRequestInput) (*GetRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedDeliveryRequestServiceServer) UpdateRequest(context.Context, *UpdateRequestInput) (*UpdateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequest not implemented")
}
func (UnimplementedDeliveryRequestServiceServer) DeleteRequest(context.Context, *DeleteRequestInput) (*DeleteRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequest not implemented")
}
func (UnimplementedDeliveryRequestServiceServer) ExportCSV(context.Context, *GetRequestInput) (*ExportCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCSV not implemented")
}
func (UnimplementedDeliveryRequestServiceServer) GetRequestStatuses(context.Context, *emptypb.Empty) (*GetRequestStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestStatuses not implemented")
}
func (UnimplementedDeliveryRequestServiceServer) mustEmbedUnimplementedDeliveryRequestServiceServer() {
}
func (UnimplementedDeliveryRequestServiceServer) testEmbeddedByValue() {}

// UnsafeDeliveryRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryRequestServiceServer will
// result in compilation errors.
type UnsafeDeliveryRequestServiceServer interface {
	mustEmbedUnimplementedDeliveryRequestServiceServer()
}

func RegisterDeliveryRequestServiceServer(s grpc.ServiceRegistrar, srv DeliveryRequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeliveryRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeliveryRequestService_ServiceDesc, srv)
}

func _DeliveryRequestService_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryRequestServiceServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryRequestService_CreateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryRequestServiceServer).CreateRequest(ctx, req.(*CreateRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryRequestService_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryRequestServiceServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryRequestService_GetRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryRequestServiceServer).GetRequest(ctx, req.(*GetRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryRequestService_UpdateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryRequestServiceServer).UpdateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryRequestService_UpdateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryRequestServiceServer).UpdateRequest(ctx, req.(*UpdateRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryRequestService_DeleteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryRequestServiceServer).DeleteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryRequestService_DeleteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryRequestServiceServer).DeleteRequest(ctx, req.(*DeleteRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryRequestService_ExportCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryRequestServiceServer).ExportCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryRequestService_ExportCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryRequestServiceServer).ExportCSV(ctx, req.(*GetRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryRequestService_GetRequestStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryRequestServiceServer).GetRequestStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryRequestService_GetRequestStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryRequestServiceServer).GetRequestStatuses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryRequestService_ServiceDesc is the grpc.ServiceDesc for DeliveryRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drs.DeliveryRequestService",
	HandlerType: (*DeliveryRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRequest",
			Handler:    _DeliveryRequestService_CreateRequest_Handler,
		},
		{
			MethodName: "GetRequest",
			Handler:    _DeliveryRequestService_GetRequest_Handler,
		},
		{
			MethodName: "UpdateRequest",
			Handler:    _DeliveryRequestService_UpdateRequest_Handler,
		},
		{
			MethodName: "DeleteRequest",
			Handler:    _DeliveryRequestService_DeleteRequest_Handler,
		},
		{
			MethodName: "ExportCSV",
			Handler:    _DeliveryRequestService_ExportCSV_Handler,
		},
		{
			MethodName: "GetRequestStatuses",
			Handler:    _DeliveryRequestService_GetRequestStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drs/proto/delivery_request.proto",
}
