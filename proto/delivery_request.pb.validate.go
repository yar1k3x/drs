// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/delivery_request.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRequestInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRequestInputMultiError, or nil if none found.
func (m *CreateRequestInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWeight() <= 0 {
		err := CreateRequestInputValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFromLocation()) < 1 {
		err := CreateRequestInputValidationError{
			field:  "FromLocation",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToLocation()) < 1 {
		err := CreateRequestInputValidationError{
			field:  "ToLocation",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPreferredDate()) < 1 {
		err := CreateRequestInputValidationError{
			field:  "PreferredDate",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedBy() <= 0 {
		err := CreateRequestInputValidationError{
			field:  "CreatedBy",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetResponsibleId() <= 0 {
		err := CreateRequestInputValidationError{
			field:  "ResponsibleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreatedAt()) < 1 {
		err := CreateRequestInputValidationError{
			field:  "CreatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRequestInputMultiError(errors)
	}

	return nil
}

// CreateRequestInputMultiError is an error wrapping multiple validation errors
// returned by CreateRequestInput.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestInputMultiError) AllErrors() []error { return m }

// CreateRequestInputValidationError is the validation error returned by
// CreateRequestInput.Validate if the designated constraints aren't met.
type CreateRequestInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestInputValidationError) ErrorName() string {
	return "CreateRequestInputValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestInputValidationError{}

// Validate checks the field values on CreateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRequestResponseMultiError, or nil if none found.
func (m *CreateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateRequestResponseMultiError(errors)
	}

	return nil
}

// CreateRequestResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestResponseMultiError) AllErrors() []error { return m }

// CreateRequestResponseValidationError is the validation error returned by
// CreateRequestResponse.Validate if the designated constraints aren't met.
type CreateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestResponseValidationError) ErrorName() string {
	return "CreateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestResponseValidationError{}

// Validate checks the field values on GetRequestInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRequestInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRequestInputMultiError, or nil if none found.
func (m *GetRequestInput) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequestInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRequestInputValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRequestInputValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRequestInputValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatusId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRequestInputValidationError{
					field:  "StatusId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRequestInputValidationError{
					field:  "StatusId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRequestInputValidationError{
				field:  "StatusId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRequestInputMultiError(errors)
	}

	return nil
}

// GetRequestInputMultiError is an error wrapping multiple validation errors
// returned by GetRequestInput.ValidateAll() if the designated constraints
// aren't met.
type GetRequestInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestInputMultiError) AllErrors() []error { return m }

// GetRequestInputValidationError is the validation error returned by
// GetRequestInput.Validate if the designated constraints aren't met.
type GetRequestInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestInputValidationError) ErrorName() string { return "GetRequestInputValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestInputValidationError{}

// Validate checks the field values on GetRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRequestResponseMultiError, or nil if none found.
func (m *GetRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRequestResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRequestResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestResponseValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRequestResponseMultiError(errors)
	}

	return nil
}

// GetRequestResponseMultiError is an error wrapping multiple validation errors
// returned by GetRequestResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestResponseMultiError) AllErrors() []error { return m }

// GetRequestResponseValidationError is the validation error returned by
// GetRequestResponse.Validate if the designated constraints aren't met.
type GetRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestResponseValidationError) ErrorName() string {
	return "GetRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestResponseValidationError{}

// Validate checks the field values on DeliveryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeliveryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliveryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliveryRequestMultiError, or nil if none found.
func (m *DeliveryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliveryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Weight

	// no validation rules for FromLocation

	// no validation rules for ToLocation

	// no validation rules for PreferredDate

	// no validation rules for CreatedBy

	// no validation rules for ResponsibleId

	// no validation rules for StatusId

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return DeliveryRequestMultiError(errors)
	}

	return nil
}

// DeliveryRequestMultiError is an error wrapping multiple validation errors
// returned by DeliveryRequest.ValidateAll() if the designated constraints
// aren't met.
type DeliveryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliveryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliveryRequestMultiError) AllErrors() []error { return m }

// DeliveryRequestValidationError is the validation error returned by
// DeliveryRequest.Validate if the designated constraints aren't met.
type DeliveryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliveryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliveryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliveryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliveryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliveryRequestValidationError) ErrorName() string { return "DeliveryRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeliveryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliveryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliveryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliveryRequestValidationError{}

// Validate checks the field values on UpdateRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRequestInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRequestInputMultiError, or nil if none found.
func (m *UpdateRequestInput) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequestInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if wrapper := m.GetWeight(); wrapper != nil {

		if wrapper.GetValue() != 0 {

			if wrapper.GetValue() <= 0 {
				err := UpdateRequestInputValidationError{
					field:  "Weight",
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetFromLocation(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if utf8.RuneCountInString(wrapper.GetValue()) < 1 {
				err := UpdateRequestInputValidationError{
					field:  "FromLocation",
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetToLocation(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if utf8.RuneCountInString(wrapper.GetValue()) < 1 {
				err := UpdateRequestInputValidationError{
					field:  "ToLocation",
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetPreferredDate(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if utf8.RuneCountInString(wrapper.GetValue()) < 1 {
				err := UpdateRequestInputValidationError{
					field:  "PreferredDate",
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetResponsibleId(); wrapper != nil {

		if wrapper.GetValue() != 0 {

			if wrapper.GetValue() <= 0 {
				err := UpdateRequestInputValidationError{
					field:  "ResponsibleId",
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetStatusId(); wrapper != nil {

		if wrapper.GetValue() != 0 {

			if wrapper.GetValue() <= 0 {
				err := UpdateRequestInputValidationError{
					field:  "StatusId",
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if wrapper := m.GetRequestId(); wrapper != nil {

		if wrapper.GetValue() <= 0 {
			err := UpdateRequestInputValidationError{
				field:  "RequestId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateRequestInputMultiError(errors)
	}

	return nil
}

// UpdateRequestInputMultiError is an error wrapping multiple validation errors
// returned by UpdateRequestInput.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestInputMultiError) AllErrors() []error { return m }

// UpdateRequestInputValidationError is the validation error returned by
// UpdateRequestInput.Validate if the designated constraints aren't met.
type UpdateRequestInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestInputValidationError) ErrorName() string {
	return "UpdateRequestInputValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRequestInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequestInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestInputValidationError{}

// Validate checks the field values on UpdateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRequestResponseMultiError, or nil if none found.
func (m *UpdateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateRequestResponseMultiError(errors)
	}

	return nil
}

// UpdateRequestResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestResponseMultiError) AllErrors() []error { return m }

// UpdateRequestResponseValidationError is the validation error returned by
// UpdateRequestResponse.Validate if the designated constraints aren't met.
type UpdateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestResponseValidationError) ErrorName() string {
	return "UpdateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestResponseValidationError{}

// Validate checks the field values on DeleteRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestInputMultiError, or nil if none found.
func (m *DeleteRequestInput) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRequestId()) < 1 {
		err := DeleteRequestInputValidationError{
			field:  "RequestId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRequestInputMultiError(errors)
	}

	return nil
}

// DeleteRequestInputMultiError is an error wrapping multiple validation errors
// returned by DeleteRequestInput.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestInputMultiError) AllErrors() []error { return m }

// DeleteRequestInputValidationError is the validation error returned by
// DeleteRequestInput.Validate if the designated constraints aren't met.
type DeleteRequestInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestInputValidationError) ErrorName() string {
	return "DeleteRequestInputValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestInputValidationError{}

// Validate checks the field values on DeleteRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRequestResponseMultiError, or nil if none found.
func (m *DeleteRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteRequestResponseMultiError(errors)
	}

	return nil
}

// DeleteRequestResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestResponseMultiError) AllErrors() []error { return m }

// DeleteRequestResponseValidationError is the validation error returned by
// DeleteRequestResponse.Validate if the designated constraints aren't met.
type DeleteRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestResponseValidationError) ErrorName() string {
	return "DeleteRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestResponseValidationError{}
